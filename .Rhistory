knitr::opts_chunk$set(echo = TRUE)
library(here)
library(data.table)
typeof(1)
typeof(1L)
typeof(NA)
typeof (NA_integer_)
DT[,5]
# Create my_first_data_table
my_first_data_table <- data.table(x = c("a", "b", "c", "d", "e"),y = c(1, 2, 3, 4, 5))
# Create a data.table using recycling
DT <- data.table(a = c(1L,2L), b = LETTERS[1:4])
DT
DT[,5]
D<- 5
DT[,.(D)]
DT[,D]
DT
DT <- data.table(A=c(1:5),
B=c(a,b),
C=c(6:10))
DT <- data.table(A=c(1:5),
B=c("a","b"),
C=c(6:10))
DT
DT <- data.table(A=c(1:5L),
B=c("a","b"),
C=c(6:10))
DT
typeof(1)
typeof(1L)
typeof(NA)
typeof (NA_integer_)
DT[,.(B,C)]
DT[,list(B,C)]
DT[,c(B,C)]
DT[,c("B","C")]
DT[,plot(A,c)]
DT[,plot(A,C)]
DT[,{print(A)
hist(C)
NULL}]
DT
DT[,.(A,tot = sum(C))]
DT[,.(B,tot = sum(C))]
DT[,.(B,tot = sum(C)), by = B]
DT[,.(B,tot = sum(C))]
# data.table version of iris: DT
DT <- as.data.table(iris)
# Now name the output columns `Area` and `Count`
DT[,.(count= .N), by = .(Area = 10 * round(Sepal.Length*Sepal.Width / 10))]
# Calculate the sum of columns H1 and H2
DT[,lapply(.SD, sum), .SDcols = paste0("H", 1:2)]
# Calculate the sum of columns H1 and H2
DT
# Calculate the sum of columns H1 and H2
DT<- data.table(grp=c(6,8)
,Q1 = c(3,3,5,2,4)
,Q2 = c(1,1,5)
,Q3 = c(3,2,5,1,3)
,H1 = c(1,4,3,5,1)
,H2 = c(1,5,1,3,3))
# Calculate the sum of columns H1 and H2
DT<- data.table(grp=c(6,8)
,Q1 = c(3,3,5,2,4)
,Q2 = c(1,1,5)
,Q3 = c(3,2,5,1,3)
,H1 = c(1,4,3,5,1)
,H2 = c(1,5,1,3,3))
DT
# Calculate the sum of columns H1 and H2
DT<- data.table(grp=rep(c(6,8),2)
,Q1 = c(3,3,5,2,4)
,Q2 = c(1,1,5)
,Q3 = c(3,2,5,1,3)
,H1 = c(1,4,3,5,1)
,H2 = c(1,5,1,3,3))
DT
rep(c(6,8),2)
# Calculate the sum of columns H1 and H2
DT<- data.table(grp=rep(c(6,8),each=2)
,Q1 = c(3,3,5,2,4)
,Q2 = c(1,1,5)
,Q3 = c(3,2,5,1,3)
,H1 = c(1,4,3,5,1)
,H2 = c(1,5,1,3,3))
DT
# Calculate the sum of columns H1 and H2
DT<- data.table(grp= c(6,6,8,8,8)
,Q1 = c(3,3,5,2,4)
,Q2 = c(1,1,5)
,Q3 = c(3,2,5,1,3)
,H1 = c(1,4,3,5,1)
,H2 = c(1,5,1,3,3))
DT
DT[,lapply(.SD, sum), .SDcols = paste0("H", 1:2)]
DT[-1,.SD,by=grp,.SDcols=paste0("Q",1:3)]
DT <- data.table(x=c(2,1,2,1,2,2,1)
y=c(1,3,5,7,9 ,11 ,13)
DT <- data.table(x=c(2,1,2,1,2,2,1)
,y=c(1,3,5,7,9 ,11 ,13)
,z= c(2 , 4 , 6 , 8 ,10 ,12 ,14))
DT
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(data.table)
DT
DT <- data.table(x=c(2,1,2,1,2,2,1)
,y=c(1,3,5,7,9 ,11 ,13)
,z= c(2 , 4 , 6 , 8 ,10 ,12 ,14))
DT
DT[,c("x","new_col") := .(rev(x),x+y+z)]
DT
#if there is only 1 column to be updated then we can use the shortcut
DT[,y := rev(y)]
DT
#to remove columns
DT[, new_col := NULL]
DT
#If multiple columns to be deleted are say in a vector, then we can wrap that vector inside brackets
mycols <- c("x","y")
#If multiple columns to be deleted are say in a vector, then we can wrap that vector inside brackets
mycols <- c("new_col1","new_col2")
DT[,(mycols) := .(rep(1,5),x*100)]
DT
DT[,(mycols) := .(rep(c(1,2),5),x*100)]
DT
#LHS of column name can also be used liek this
DT[,paste0("new_col",1:2) := NULL]
DT
rep(c(1,2), each =2)
DT[,`:=` (new_col1 = rep(c(1,2), each =2)
,new_col2 = new_col1*100)]
DT[,`:=` (new_col1 = rep(c(1,2), each =2)
,new_col2 = x*100)]
DT
DT
DT[-1:2,new_col1 := sum(new_col2), by = x]
DT[-c(1:2),new_col1 := sum(new_col2), by = x]
DT
#new col with sum of z
DT[,new_col3 := sum(z)]
DT
DT <- data.table(A = letters[c(1, 1, 1, 2, 2)], B = 1:5)
DT
DT
DT
DT[2,B:=NULL]
DT
DT <- data.table(x=c(2,1,2,1,2,2,1)
,y=c(1,3,5,7,9 ,11 ,13)
,z= c(2 , 4 , 6 , 8 ,10 ,12 ,14))
DT
for(1 in 1:5) DT[i,new_col := i*10]
for(i in 1:5) DT[i,new_col := i*10]
DT
DT
#or
for(i in 6:7) set(DT,i,4L,i*100)
DT
DT
setnames(DT,c("z","new_col"),c("new_col1","new_col2"))
DT
setcolorder(DT,c("new_col1","new_col2"))
DT
rnorm(3)
sample(1:10,3)
sample(1:10,3)
sample(1:10,3)
set.seed(1)
sample(1:10,3)
sample(1:10,3)
set.seed(1)
sample(1:10,3)
sample(1:10,3)
set.seed(1)
sample(1:10,3)
DT
#Loop through columns 2, 3, and 4, and for each one, select 3 rows at random and set the value of that column to NA.
for(i in 2:4) set(DT,sample(1:10,3),i,NA)
#Loop through columns 2, 3, and 4, and for each one, select 3 rows at random and set the value of that column to NA.
for(i in 2:4) set(DT,sample(1:nrow(DT),3),i,NA)
#Loop through columns 2, 3, and 4, and for each one, select 3 rows at random and set the value of that column to NA.
for(i in 2:4) set(DT,sample(1:nrow(DT),3),i,NA)
DT
DT
DT <- data.table(x=c(2,1,2,1,2,2,1)
,y=c(1,3,5,7,9 ,11 ,13)
,z= c(2 , 4 , 6 , 8 ,10 ,12 ,14))
DT
DT[,new_col1 := x*100]
DT
#Loop through columns 2, 3, and 4, and for each one, select 3 rows at random and set the value of that column to NA.
for(i in 2:4) set(DT,sample(1:nrow(DT),3),i,NA)
DT
DT
DT <- data.table(x=c(rep("a","b", each =2))
,y=c(1,3,5,7,9 ,11 ,13)
,z= c(2 , 4 , 6 , 8 ,10 ,12 ,14))
DT <- data.table(x=c(rep(c("a","b"), each =2))
,y=c(1,3,5,7,9 ,11 ,13)
,z= c(2 , 4 , 6 , 8 ,10 ,12 ,14))
DT
iris <- data.table(iris)
iris1 <- data.table(iris)
names(iris1)
grep("Sepal.",names(iris1))
v <- names(iris1)
v
grep("Sepal.",v)
gsub("Sepal.","",v)
setnames(iris1,grep("Sepal.",names(iris1))
iris1
iris1 <- data.table(iris)
,gsub("Sepal.",names(iris1))
setnames(iris1,grep("Sepal.",names(iris1))
,gsub("Sepal.",names(iris1)))
setnames(iris1,grep("Sepal.",names(iris1))
,gsub("Sepal.","",names(iris1)))
("Sepal.",names(iris1)
grep("Sepal.",names(iris1))
gsub("Sepal.","",names(iris1))
setnames(iris1
,grep("Sepal.",names(iris1))
,gsub("Sepal.","",names(iris1)))
setnames(iris1
,grep("Sepal.",names(iris1))
,gsub("Sepal.","",grep("Sepal.",names(iris1))))
iris1
iris1 <- data.table(iris)
v <- names(iris1)
v
grep("Sepal.",v)
gsub("Sepal.","",v)
iris1
iris1[,`grep("^Petal",names(iris1)))]
iris1[,`grep("^Petal",names(iris1))]
iris1[,`grep("^Petal",names(iris1))`]
grep("^Petal",names(iris1))
iris1[,.(grep("^Petal",names(iris1))) := NULL]
iris1[,grep("^Petal",names(iris1)) := NULL]
iris1[,.(grep("^Petal",names(iris1))) := NULL]
DT[(is_large)]
# Now large observations with is_large
#For the third instruction, DT[is_large] will not work because is_large is not in the calling environment. In this situation, you can use DT[is_large == TRUE], or just wrap it in parentheses so that it's not a single name anymore:
iris[is_large]
DT <- data.table(x=c(rep(c("a","b"), each =2))
,y=c(1,3,5,7,9 ,11 ,13)
,z= c(2 , 4 , 6 , 8 ,10 ,12 ,14))
DT
setkey(DT,x)
DT
DT["a"]
DT["b",mult = "first"]
DT
DT[c("a","c")]
DT[c("a","c"),nomatch = 0]
#Setting 2 column keys
DT
setkey(DT,x,y)
#Setting 2 column keys
DT
DT[.("a",1)]
DT <- data.table(x=c(rep(c("a","b"), each =2))
,y=c(1,5,3,7,1 ,3 ,13)
,z= c(2 , 3 , 11 , 13 ,10 ,5 ,1))
#Setting 2 column keys
DT
setkey(DT,x,y)
#Setting 2 column keys
DT
DT[.("a",1)]
DT <- data.table(x=c(rep(c("a","b"), each =2))
,y=c(1,5,3,7,1 ,3 ,13)
,z= c(1 , 3 , 11 , 13 ,10 ,5 ,1))
#Setting 2 column keys
DT
setkey(DT,x,y)
DT[.("a",1)]
#Setting 2 column keys
DT
DT[.("a",11)]
DT["a"]
DT <- data.table(A = letters[c(2, 1, 2, 3, 1, 2, 3)],
B = c(5, 4, 1, 9, 8, 8, 6),
C = 6:12)
DT
setkey(DT, A, B)
DT
DT["b"]
DT[c("b","c")]
DT <- data.table(A = letters[c(2, 1, 2, 3, 1, 2, 3)],
B = c(5, 4, 1, 9, 8, 8, 6),
C = 6:12)
DT <- data.table(A = letters[c(2, 1, 2, 3, 1, 2, 3)],
B = c(5, 4, 1, 9, 8, 8, 6),
C = 6:12,
key = "A,B")
DT
key(DT)
?data.table
#Use the super-charged row names to look up the row where A == "b" and B == 6, without using ==! Verify here that column C is NA.
DT[c("b","6")]
#Use the super-charged row names to look up the row where A == "b" and B == 6, without using ==! Verify here that column C is NA.
DT[.("b","6")]
#Use the super-charged row names to look up the row where A == "b" and B == 6, without using ==! Verify here that column C is NA.
DT[.("b",6)]
DT <- data.table(A = letters[c(2, 1, 2, 3, 1, 2, 3)],
B = c(5, 4, 1, 9, 8, 8, 6),
C = 6:12,
key = "A,B")
DT
DT["b"]
DT[.("b",(-2):10)]
DT[.("b",-2:10)]
DT[.("b",(-2):10)]
DT[.("b",(-2):10),roll = Inf]
DT[.("b",(-2):10),roll = Inf,rollends[1] = TRUE]
DT[.("b",(-2):10),roll = Inf,rollends = TRUE]
iris <- data.table(iris)
#No need for the second arugment
setnames(iris,gsub("^Sepal\\.","",names(iris)))
iris[,.(grep("^Petal",names(iris))) := NULL]
# Cleaned up iris data.table
iris <- data.table(iris)
# Area is greater than 20 square centimeters
iris[Length * Width > 20]
# Add new boolean column
iris[,is_large := Length * Width > 20]
iris[(is_large)]
or
# Create a data.table using recycling
DT <- data.table(a = c(1L,2L), b = LETTERS[1:4])
DT
# Create a data.table using recycling
DT <- data.table(a = c(1L,2L), b = LETTERS[1:4], c = 1)
DT
DT[,B]
DT[,"B"]
DT <- data.table(A=c(1:5L),
B=c("a","b"),
C=c(6:10))
DT
DT[,"B"]
DT[,B]
#Gives a vector
DT[,B]
DT[,c(B,C)]
DT[,"B"]
DT[,c("B","C")]
class(DT[,c("B","C")])
#Data.table way
DT[,2]
#Data.table way
DT[,2:3]
#Data.table way
DT[,2]
#Using column names as variables
DT[,C/A]
#Using column names as variables
DT[,.(C/A)]
#Using column names as variables, wrapinside .() to return data.table
DT[,.C/A]
#Using column names as variables, wrapinside .() to return data.table
DT[,C/A]
DT[,.(myresult = A* B)]
DT[,.(myresult = A*C)]
DT[,.(B,myresult = A*C)]
#Using column names as variables
DT[,A*C]
DT[,.(B,myresult = A*C)]
DT
DT[,{var <- C*100; var * A}]
DT[,.({var <- C*100; var * A})]
DT[,.(A,B,C,{var <- C*100; var * A})]
DT[,.(A,B,C,{var <- C*100; var 1 A})]
DT[,.(A,B,C,{var <- C*100; var + A})]
DT[,sin(A)]
DT[,.(sin(A),cos(A))]
#Even a plot
DT[,plot(A,C)]
DT[,{print(A)
hist(C)
NULL}]
DT[,{print(A) ;
hist(C) ;
NULL}]
DT[,{print(A) hist(C) NULL}]
DT[,{print(A)
hist(C)
A+C}]
DT[,{print(A)
hist(C)
A+C
.(A+C)}]
#Use {} to create a variable and use it with a column
DT[,.(A,B,C,{var <- C*100; var + A})]
#Multiple expressions can be wrapped inside curly braces, separate by ; or \n
DT[,{print(A)
hist(C)
A+C
.(A+C)}]
#Call any function, Wrap inside .() to return DT
DT[,.(sin(A),cos(A))]
#Even a plot
DT[,plot(A,C)]
#Use {} to create a variable and use it with a column
DT[,.(A,B,C,{var <- C*100; var + A})]
#Multiple expressions can be wrapped inside curly braces, separate by ; or \n
DT[,{print(A)
hist(C)
A+C
.(A+C)}]
#Call any function, Wrap inside .() to return DT
DT[,.(sin(A),cos(A))]
#Even a plot
DT[,plot(A,C)]
DT[,.(count= .N), by = Sepal.Length*Sepal.Width]
DT[,.(count= .N), by = .(Sepal.Length*Sepal.Width)]
# data.table version of iris: DT
DT <- as.data.table(iris)
DT[,.(count= .N), by = .(Sepal.Length*Sepal.Width)]
DT[,.(count= .N), by = .(x = Sepal.Length*Sepal.Width)]
# Now name the output columns `Area` and `Count`
DT[,.(count= .N),
by = .(Area = 10 * round(Sepal.Length*Sepal.Width / 10))]
# data.table version of iris: DT
DT <- as.data.table(iris)
# Now name the output columns `Area` and `Count`
DT[,.(count= .N),
by = .(Area = 10 * round(Sepal.Length*Sepal.Width / 10))]
DT
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(data.table)
# data.table version of iris: DT
DT <- as.data.table(iris)
DT
# Now name the output columns `Area` and `Count`
DT[,.(count= .N),
by = .(Area = 10 * round(Sepal.Length*Sepal.Width / 10))]
DT[,.(count= .N), by = .(x = Sepal.Length*Sepal.Width)]
DT[,.(count= .N), by = Sepal.Length*Sepal.Width]
# Now name the output columns `Area` and `Count`
DT[,.(count= .N),
by = .(Area = round(Sepal.Length*Sepal.Width / 10))]
# Now name the output columns `Area` and `Count`
DT[,.(count= .N),
by = .(Area = round(Sepal.Length*Sepal.Width))]
# Now name the output columns `Area` and `Count`
DT[,.(count= .N),
by = .(Area = round(Sepal.Length*Sepal.Width/10))]
DT[,.(count= .N), by = round(Sepal.Length*Sepal.Width/10)]
DT[,.N, by = round(Sepal.Length*Sepal.Width/10)]
DT <- data.table(x=c(2,1,2,1,2,2,1)
,y=c(1,3,5,7,9 ,11 ,13)
,z= c(2 , 4 , 6 , 8 ,10 ,12 ,14))
DT[,new_col1 := x*100]
set.seed(1)
sample(1:10,3)
#Loop through columns 2, 3, and 4, and for each one, select 3 rows at random and set the value of that column to NA.
for(i in 2:4) set(DT,sample(1:nrow(DT),3),i,NA)
DT
head(iris)
# Area is greater than 20 square centimeters
iris[Length * Width > 40]
iris <- data.table(iris)
# Area is greater than 20 square centimeters
iris[Length * Width > 40]
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(data.table)
iris <- data.table(iris)
# Area is greater than 20 square centimeters
iris[Length * Width > 40]
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(data.table)
iris <- data.table(iris)
#No need for the second arugment
#Rename columns
setnames(iris,gsub("^Sepal\\.","",names(iris)))
head(iris)
# Area is greater than 20 square centimeters
iris[Length * Width > 40]
# Area is greater than 20 square centimeters
iris[Length * Width > 30]
# Area is greater than 20 square centimeters
iris[Length * Width > 25]
knitr::opts_chunk$set(echo = TRUE)
library(here)
library(data.table)
typeof(1)
typeof(1L)
typeof(NA)
typeof (NA_integer_)
typeof(1)
typeof(1L)
typeof(NA)
typeof (NA_integer_)
